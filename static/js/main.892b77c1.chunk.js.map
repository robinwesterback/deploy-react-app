{"version":3,"sources":["components/SiteHeader.jsx","components/SiteContact.jsx","components/SiteFooter.jsx","assets/js/calculator.js","containers/BusinessROICalculator.jsx","containers/CampaignROICalculator.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SiteHeader","logoName","className","href","target","SiteContact","htmlFor","type","id","name","required","SiteFooter","kpi","roi","grossProfit","marketingInvestment","netRoi","netProfit","BusinessROICalculator","setResult","useState","businesses","setBusinesses","addBusinessError","setAddBusinessError","addNewForm","useRef","getBusiness","find","item","calculateResult","items","results","map","business","result","calculator","onBusinessFormChanged","event","form","field","value","Number","newBusinesses","ref","onSubmit","preventDefault","businessName","newBusiness","LTV","newCustomersAcquired","current","reset","onChange","i","key","e","defaultValue","onClick","CampaignROICalculator","campaigns","setCampaigns","addCampaignError","setAddCampaignError","getCampaign","campaign","onCampaignFormChanged","newCampaigns","campaignName","newCampaign","ResultSection","title","App","businessResults","setBusinessResults","campaignResults","setCampaignResults","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.892b77c1.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function SiteHeader({logoName = \"Logo\"}) {\n\n    return (\n        <header className=\"header\">\n          <a className=\"logo\">{logoName}</a>\n          \n          <nav className=\"navbar\">\n              <a href=\"\" target=\"_blank\">Home</a>\n              <a href=\"\" target=\"_blank\">Business</a>\n              <a href=\"\" target=\"_blank\">Campaign</a>\n              <a href=\"\" target=\"_blank\">ROI</a>\n              <a href=\"\" target=\"_blank\">Support</a>\n          </nav>\n        </header>\n    );\n}","import React from \"react\";\n\nexport default function SiteContact() {\n  return (\n    <form>\n      <label htmlFor=\"name\">\n        Name:\n        <input type=\"text\" id=\"name\" name=\"name\" required />\n      </label>\n\n      <label htmlFor=\"company\">\n        Company:\n        <input type=\"text\" id=\"company\" name=\"company\" />\n      </label>\n\n      <label htmlFor=\"email\">\n        E-mail:\n        <input type=\"email\" id=\"email\" name=\"email\" required />\n      </label>\n\n      <label htmlFor=\"phone\">\n        Phone:\n        <input type=\"number\" id=\"phone\" name=\"phone\" />\n      </label>\n\n      <label htmlFor=\"message\">\n        Message:\n        <textarea id=\"message\" name=\"message\" required />\n      </label>\n\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n}","import React from \"react\";\n\nexport default function SiteFooter() {\n\n    return (\n        <footer>\n            <div>\n                <h3>Megapixel Group ROI Calculator</h3>\n            </div>\n            <h4>Stockholm, Sweden</h4>\n            <h4>+46 8 189 880</h4>\n            <br></br>\n            <h4>Marbella, Spain</h4>\n            <h4>info@megapixelab.se</h4>\n            <h6>\n                Did you know that Megapixel is offering marketing services?\n              <br></br>\n                <a href=\"https://www.megapixelab.se/\" target=\"_blank\">https://www.megapixelab.se/</a>\n            </h6>\n            <div>\n            </div>\n            <nav>\n                <p>copyright</p>\n                <p>privacy policy</p>\n            </nav>\n        </footer>\n    );\n}\n\n","export default {\n  calculateBusiness: (kpi) => ({\n    roi: kpi.grossProfit - kpi.marketingInvestment,\n    netRoi: kpi.netProfit - kpi.marketingInvestment\n  }),\n\n  calculateCampaign: (kpi) => ({\n    roi: kpi.grossProfit - kpi.marketingInvestment,\n    netRoi: kpi.netProfit - kpi.marketingInvestment\n  }),\n}","import React, { useState, useRef } from 'react';\nimport calculator from '../assets/js/calculator';\n\nexport default function BusinessROICalculator({setResult}) {\n  const [businesses, setBusinesses] = useState([])\n  const [addBusinessError, setAddBusinessError] = useState()\n  const addNewForm = useRef()\n\n  // getBusiness(name) finds the items to every business.\n  const getBusiness = (name) => businesses.find((item) => item.name === name)\n\n  // clear() clears and resets addNewForm, Result and Businesses.\n  const clear = () => {\n      addNewForm.current.reset()\n      setResult([])\n      setBusinesses([])\n  }\n\n  // calculateResult(items) runs calculateBusiness function based on the value of the items in business.\n  const calculateResult = (items) => {\n\n\n    const results = items.map((business) => ({\n      name: business.name,\n      result: calculator.calculateBusiness(business.kpi)\n    }))\n    setResult(results)  \n  }\n\n  // addBusiness(event) adds a business on event with name and pre-defined kpi's. \n  // It calls for setAddBusinessError if a business with the same name is added.\n  // Each time you add a business you also reset the add business input and calculate results.\n  const addBusiness = (event) => {\n    event.preventDefault()\n    const name = event.target.businessName.value\n\n    if (getBusiness(name)) {\n      setAddBusinessError(`${name} is already added.`)\n      return\n    }\n\n    const newBusiness = {\n      name,\n      kpi: {\n        grossProfit: 0,\n        netProfit: 0,\n        marketingInvestment: 0,\n        LTV: 0,\n        newCustomersAcquired: 0,\n      }\n    }\n    \n    const newBusinesses = [...businesses, newBusiness]\n    \n    setBusinesses(newBusinesses)\n    calculateResult(newBusinesses)\n    addNewForm.current.reset()\n  }\n\n  // onBusinessFormChanged(event) takes the value of every business kpi \n  // and calculate results on form change (when you add numbers to the kpi:s).\n  const onBusinessFormChanged = (event) => {\n    const business = getBusiness(event.target.form.name)\n    const field = event.target.name\n    const value = Number(event.target.value)\n\n    const newBusinesses = businesses.map((item) => {\n      if (item.name === business.name) {\n        return {\n          name: business.name,\n          kpi: { ...business.kpi, [field]: value }\n        }\n      }\n\n      return item\n    })\n\n    setBusinesses(newBusinesses)\n    calculateResult(newBusinesses)\n  }\n\n  return (\n    <div>\n      <form ref={addNewForm} onSubmit={addBusiness}>\n        <label htmlFor=\"businessName\">\n          Business name:\n          \n          <br></br>\n          <input\n            type=\"text\"\n            id=\"businessName\"\n            name=\"businessName\"\n            className={addBusinessError ? 'has-error' : ''}\n            required\n            onChange={() => setAddBusinessError(null)} />\n        </label>\n\n        {addBusinessError && (\n          <span className=\"input-error-message\">{addBusinessError}</span>\n        )}\n\n        <button type=\"submit\">Add</button>\n      </form>\n\n      {businesses.map((business, i) => (\n        <form \n          key={i} \n          name={business.name} \n          onChange={onBusinessFormChanged}\n          onSubmit={(e) => e.preventDefault()}>\n\n          <h3>{\"Business: \" + business.name}</h3>\n\n          <label htmlFor=\"grossProfit\">\n            Gross profit:\n\n            <input\n              type=\"number\"\n              id=\"grossProfit\"\n              name=\"grossProfit\"\n              defaultValue={business.kpi.grossProfit} />\n          </label>\n\n          <label htmlFor=\"netProfit\">\n            Net profit:\n\n            <input\n              type=\"number\"\n              id=\"netProfit\"\n              name=\"netProfit\"\n              defaultValue={business.kpi.netProfit} />\n          </label>\n\n          <label htmlFor=\"marketingInvestment\">\n            Marketing investment:\n\n            <input\n              type=\"number\"\n              id=\"marketingInvestment\"\n              name=\"marketingInvestment\"\n              defaultValue={business.kpi.marketingInvestment} />\n          </label>\n        </form>\n      ))}\n\n      <button type=\"button\" onClick={clear}>Clear</button>\n    </div>\n  )\n}","import React, { useState, useRef } from 'react';\nimport calculator from '../assets/js/calculator';\n\nexport default function CampaignROICalculator({setResult}) {\n  const [campaigns, setCampaigns] = useState([])\n  const [addCampaignError, setAddCampaignError] = useState()\n  const addNewForm = useRef()\n\n  // getCampaign(name) finds the items to every campaign.\n  const getCampaign = (name) => campaigns.find((item) => item.name === name)\n\n  // clear() clears and resets addNewForm, Result and Campaigns.\n  const clear = () => {\n    addNewForm.current.reset()\n    setResult([])\n    setCampaigns([])\n  }\n\n  // calculateResult(items) runs calculateCampaign function based on the value of the items in campaign.\n  const calculateResult = (items) => {\n    const results = items.map((campaign) => ({\n      name: campaign.name,\n      result: calculator.calculateCampaign(campaign.kpi)\n    }))\n\n    setResult(results)\n  }\n\n  // addCampaign(event) adds a campaign on event with name and pre-defined kpi's. \n  // It calls for setAddCampaignError if a campaign with the same name is added.\n  // Each time you add a campaign you also reset the add campaign input and calculate results.\n  const addCampaign = (event) => {\n    event.preventDefault()\n    const name = event.target.campaignName.value\n\n    if (getCampaign(name)) {\n      setAddCampaignError(`${name} is already added.`)\n      return\n    }\n\n    const newCampaign = {\n      name,\n      kpi: {\n        grossProfit: 0,\n        netProfit: 0,\n        marketingInvestment: 0,\n        LTV: 0,\n        newCustomersAcquired: 0,\n      }\n    }\n\n    const newCampaigns = [...campaigns, newCampaign]\n\n    setCampaigns(newCampaigns)\n    calculateResult(newCampaigns)\n    addNewForm.current.reset()\n  }\n\n  // onCampaignFormChanged(event) takes the value of every campaign kpi \n  // and calculate results on form change (when you add numbers to the kpi:s).\n  const onCampaignFormChanged = (event) => {\n    const campaign = getCampaign(event.target.form.name)\n    const field = event.target.name\n    const value = Number(event.target.value)\n\n    const newCampaigns = campaigns.map((item) => {\n      if (item.name === campaign.name) {\n        return {\n          name: campaign.name,\n          kpi: { ...campaign.kpi, [field]: value }\n        }\n      }\n\n      return item\n    })\n\n    setCampaigns(newCampaigns)\n    calculateResult(newCampaigns)\n  }\n\n  return (\n    <div>\n      <form ref={addNewForm} onSubmit={addCampaign}>\n        <label htmlFor=\"campaignName\">\n          Name\n\n          <input\n            type=\"text\"\n            id=\"campaignName\"\n            name=\"campaignName\"\n            className={addCampaignError ? 'has-error' : ''}\n            required\n            onChange={() => setAddCampaignError(null)} />\n        </label>\n\n        {addCampaignError && (\n          <span className=\"input-error-message\">{addCampaignError}</span>\n        )}\n\n        <button type=\"submit\">Add</button>\n      </form>\n\n      {campaigns.map((campaign, i) => (\n        <form\n          key={i}\n          name={campaign.name}\n          onChange={onCampaignFormChanged}\n          onSubmit={(e) => e.preventDefault()}>\n          <label htmlFor=\"grossProfit\">\n            Gross profit\n\n            <input\n              type=\"number\"\n              id=\"grossProfit\"\n              name=\"grossProfit\"\n              defaultValue={campaign.kpi.grossProfit} />\n          </label>\n\n          <label htmlFor=\"netProfit\">\n            Net profit\n\n            <input\n              type=\"number\"\n              id=\"netProfit\"\n              name=\"netProfit\"\n              defaultValue={campaign.kpi.netProfit} />\n          </label>\n\n          <label htmlFor=\"marketingInvestment\">\n            Marketing investment\n\n            <input\n              type=\"number\"\n              id=\"marketingInvestment\"\n              name=\"marketingInvestment\"\n              defaultValue={campaign.kpi.marketingInvestment} />\n          </label>\n        </form>\n      ))}\n\n      <button type=\"button\" onClick={clear}>Clear</button>\n    </div>\n  )\n}","import React, {useState} from 'react';\nimport './App.css';\n\nimport SiteHeader from './components/SiteHeader';\nimport SiteContact from './components/SiteContact';\nimport SiteFooter from './components/SiteFooter';\nimport BusinessROICalculator from './containers/BusinessROICalculator';\nimport CampaignROICalculator from './containers/CampaignROICalculator';\n\nfunction App() {\n  const [businessResults, setBusinessResults] = useState([])\n  const [campaignResults, setCampaignResults] = useState([])\n\n  return (\n    <div>\n        <SiteHeader logoName=\"ROI Calculator\" />\n\n        <main className=\"body\">\n          <section>\n            <h1>The ROI calculator</h1>\n            <p>\n              Define your KPI:s and calculate the results of your business or marketing investment. \n            </p>\n          </section>\n\n          <section>\n            <div>\n              <h2>Add a business</h2>\n              <p className=\"orange-bold\">Add a business by naming it to start defining your KPI:s.</p>\n              <BusinessROICalculator setResult={setBusinessResults} />\n            </div>\n\n            <div>\n              <h2>Add a campaign</h2>\n              <p className=\"orange-bold\">Add a campaign by naming it to start defining your KPI:s.</p>\n              <CampaignROICalculator setResult={setCampaignResults} />\n            </div>\n          </section>  \n\n          <section>\n            <h2>Calculate your ROI</h2>\n            <p className=\"orange-bold\">\n                Get your results based on the KPI:s you have added by clicking the button below. \n                Just change the KPI:s or add more investments to calculate new results.\n            </p>\n            \n            <div>\n              {businessResults.length > 0 &&\n                <ResultSection\n                  title=\"Business results\"\n                  results={businessResults} />}\n            </div>\n\n            <div>\n              {campaignResults.length > 0 &&\n            <ResultSection\n              title=\"Campaign result\"\n              results={campaignResults} />}\n            </div>\n          </section>  \n\n          <section>\n            <h2>Support</h2>\n            <p className=\"orange-bold\">\n              If you're in need of support? Do you want to feedback on any KPI:s or functionalities that you feel are missing?\n              Contact us via the form below! \n            </p>\n            <SiteContact/>\n          </section>\n        </main>\n\n        <SiteFooter/>\n    </div>\n  );\n}\n\nconst ResultSection = ({title, results}) => (\n  <div>\n    <h3>{title}</h3>\n\n    {results.map((item, i) => (\n      <div key={i}>\n        <h4>{item.name}</h4>\n\n        <span>ROI: {item.result.roi}</span>\n        <span>Net ROI: {item.result.netRoi}</span>\n      </div>\n    ))}\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}